stepStart = lm(TARGET_WINS ~ 1, data = training_data_amelia)
step(stepStart, direction = "forward", scope = formula(modelAmeliaBWD))
modelAmeliaFWD <- lm(formula = TARGET_WINS ~ BATTING_2B + BATTING_1B + BATTING_HR +
BATTING_BB + PITCHING_BB + BATTING_3B + BATTING_SO + PITCHING_HR +
PITCHING_H + PITCHING_SO + FIELDING_E, data = training_data_amelia)
summary(modelAmeliaFWD)
paste0("AIC: ", round(AIC(modelAmeliaFWD),2))
# Log Transformed & Amelia Imputed Values Backward Step
modelAmeliaLog <- lm(TARGET_WINS ~ ., data = training_data_amelia_log)
summary(modelAmeliaLog)
step(modelAmeliaLog, direction = "backward")
modelAmeliaLogBWD <- lm(formula = TARGET_WINS ~ BATTING_2B + BATTING_3B + BATTING_HR +
BATTING_BB + PITCHING_H + PITCHING_HR + PITCHING_BB + PITCHING_SO +
FIELDING_E + BATTING_1B, data = training_data_amelia_log)
summary(modelAmeliaLogBWD)
paste0("AIC: ", round(AIC(modelAmeliaLogBWD),2))
# Log Transformed & Amelia Imputed Values Forward Step
stepStart = lm(TARGET_WINS ~ 1, data = training_data_amelia_log)
step(stepStart, direction = "forward", scope = formula(modelAmeliaLogBWD))
modelAmeliaLogFWD <- lm(formula = TARGET_WINS ~ PITCHING_BB + BATTING_2B + BATTING_1B +
BATTING_BB + BATTING_HR + BATTING_3B + PITCHING_SO + FIELDING_E,
data = training_data_amelia_log)
summary(modelAmeliaLogFWD)
paste0("AIC: ", round(AIC(modelAmeliaLogFWD),2))
plot(modelAmeliaLogFWD$residuals, main = "Model 6 Residual Plot")
test_data <- read.csv("data/moneyball-evaluation-data.csv", header = TRUE, stringsAsFactors = FALSE)
names(test_data) <- str_replace_all(names(test_data),"TEAM_","")
test_data <- mutate(training_data, BATTING_1B = (BATTING_H - BATTING_HR - BATTING_3B - BATTING_2B)) %>%
dplyr::select(-BATTING_HBP,-BASERUN_CS, -FIELDING_DP, -BASERUN_SB, -BATTING_H)
test_data <- read.csv("data/moneyball-evaluation-data.csv", header = TRUE, stringsAsFactors = FALSE)
names(test_data) <- str_replace_all(names(test_data),"TEAM_","")
test_data <- mutate(test_data, BATTING_1B = (BATTING_H - BATTING_HR - BATTING_3B - BATTING_2B)) %>%
dplyr::select(-BATTING_HBP,-BASERUN_CS, -FIELDING_DP, -BASERUN_SB, -BATTING_H)
# Modernized test data
test_data <- dplyr::filter(test_data, !test_data$TARGET_WINS == 0)
test_data <- read.csv("data/moneyball-evaluation-data.csv", header = TRUE, stringsAsFactors = FALSE)
names(test_data) <- str_replace_all(names(test_data),"TEAM_","")
test_data <- mutate(test_data, BATTING_1B = (BATTING_H - BATTING_HR - BATTING_3B - BATTING_2B)) %>%
dplyr::select(-BATTING_HBP,-BASERUN_CS, -FIELDING_DP, -BASERUN_SB, -BATTING_H)
# Modernized test data
test_data <- dplyr::filter(test_data, !test_data$PITCHING_HR == 0)
test_data <- dplyr::filter(test_data, !test_data$BATTING_3B == 0)
test_data <- dplyr::filter(test_data, !test_data$BATTING_BB == 0)
test_data <- dplyr::filter(test_data, !test_data$BATTING_HR == 0)
test_data <- dplyr::filter(test_data, !test_data$BATTING_SO == 0)
# Remove outliers before imputation
test_data_prepared <- test_data
test_data_prepared$PITCHING_H[test_data_prepared$PITCHING_H > 2*sd(test_data_prepared$PITCHING_H)] <- NA
test_data_prepared$PITCHING_BB[test_data_prepared$PITCHING_BB > 2*sd(test_data_prepared$PITCHING_BB)] <- NA
test_data_prepared$FIELDING_E[test_data_prepared$FIELDING_E > 2*sd(test_data_prepared$FIELDING_E)] <- NA
test_data_prepared$PITCHING_SO[test_data_prepared$PITCHING_SO > 2*sd(test_data_prepared$PITCHING_SO)] <- NA
test_data_prepared$BATTING_3B[test_data_prepared$BATTING_3B > 2*sd(test_data_prepared$BATTING_3B)] <- NA
# Impute using Amelia's multiple imputation package
test_data_log <- test_data_prepared
test_data_log$BATTING_2B <- log(test_data_log$BATTING_2B)
test_data_log$BATTING_3B <- log(test_data_log$BATTING_3B)
test_data_log$BATTING_HR <- log(test_data_log$BATTING_HR)
test_data_log$BATTING_BB <- log(test_data_log$BATTING_BB)
test_data_log$BATTING_SO <- log(test_data_log$BATTING_SO)
test_data_log$PITCHING_H <- log(test_data_log$PITCHING_H)
test_data_log$PITCHING_HR <- log(test_data_log$PITCHING_HR)
test_data_log$PITCHING_BB <- log(test_data_log$PITCHING_BB)
test_data_log$PITCHING_SO <- log(test_data_log$PITCHING_SO)
test_data_log$FIELDING_E <- log(test_data_log$FIELDING_E)
test_data_log$BATTING_1B <- log(test_data_log$BATTING_1B)
# Only one iteration will be used for simplicity
test_data_log_imputed <- amelia(test_data_log, m=5,  p2s = 0)
# Predict wins
predictions <- predict(modelAmeliaLogFWD, newdata = test_data_log_imputed, interval="prediction")
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaLogFWD, newdata = test_data_amelia_log, interval="prediction")
View(predictions)
10^(predictions)
floor(10^(predictions))
floor(predictions)
predictions
exp(predictions)
round(exp(predictions))
round(mean(exp(predictions)))
round(mean(exp(predictions$fit)))
predictions$fit
predictions[fit]
predictions['fit']
predictions[['fit']]
describe(predictions)
describe(exp(predictions))
exp(predictions)
round(exp(predictions))
round(exp(predictions)+30)
aaa <- mutate(test_data_amelia_log, fit = exp(3.49) - exp(2.54*PITCHING_BB) + exp(1.57*BATTING_2B) + exp(1.09*BATTING_1B) + exp(0.71*BATTING_BB) - exp(0.57*BATTING_HR) - exp(0.79*BATTING_3B) - exp(0.08*PITCHING_SO) - exp(0.04*FIELDING_E) )
View(aaa)
exp(aaa$fit)
exp(3.49)
aaa <- mutate(test_data_amelia_log, fit = exp(3.49) - (2.54*PITCHING_BB) + (1.57*BATTING_2B) + (1.09*BATTING_1B) + (0.71*BATTING_BB) - (0.57*BATTING_HR) - (0.79*BATTING_3B) - (0.08*PITCHING_SO) - (0.04*FIELDING_E) )
aaa <- mutate(test_data_amelia_log, fit = exp(3.49) - (2.54*PITCHING_BB) + (1.57*BATTING_2B) + (1.09*BATTING_1B) + (0.71*BATTING_BB) - (0.57*BATTING_HR) - (0.79*BATTING_3B) - (0.08*PITCHING_SO) - (0.04*FIELDING_E) )
aaa$fit
fit <- exp(32)
exp(32)
aaa <- mutate(test_data_amelia_log, fit = (3.49) - (2.54*PITCHING_BB) + (1.57*BATTING_2B) + (1.09*BATTING_1B) + (0.71*BATTING_BB) - (0.57*BATTING_HR) - (0.79*BATTING_3B) - (0.08*PITCHING_SO) - (0.04*FIELDING_E) )
aaa <- mutate(test_data_amelia_log, fit = (3.49) - (2.54*PITCHING_BB) + (1.57*BATTING_2B) + (1.09*BATTING_1B) + (0.71*BATTING_BB) - (0.57*BATTING_HR) - (0.79*BATTING_3B) - (0.08*PITCHING_SO) - (0.04*FIELDING_E) )
aaa$fit
exp(aaa$fit)
round(exp(aaa$fit)))
round(exp(aaa$fit))
predictions
exp(predictions)
round(exp(predictions))
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaLogBWD, newdata = test_data_amelia_log, interval="prediction")
round(exp(predictions))
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaBWD, newdata = test_data_amelia_log, interval="prediction")
round(exp(predictions))
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaFWD, newdata = test_data_amelia_log, interval="prediction")
round(exp(predictions))
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaFWD, newdata = test_data_amelia_log, interval="prediction")
round(predictions)
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaBWD, newdata = test_data_amelia_log, interval="prediction")
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaBWD, newdata = test_data_amelia_log, interval="prediction")
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaLogBWD, newdata = test_data_amelia_log, interval="prediction")
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaLogBWD, newdata = test_data_amelia_log, interval="prediction")
predictions <- exp(predictions)
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaLogBWD, newdata = test_data_amelia_log, interval="prediction")
predictions <- exp(predictions)
predictions
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaLogBWD, newdata = test_data_amelia_log, interval="prediction")
predictions <- exp(predictions)
# Predict wins
test_data_amelia_log <- test_data_log_imputed$imputations[[5]]
predictions <- predict(modelAmeliaLogBWD, newdata = test_data_amelia_log, interval="prediction")
predictions <- round(exp(predictions))
predictions
sample(predictions,10)
head(predictions,10)
head(predictions,20)
corrplot( round( cor(training_data, method = "pearson", use = "complete.obs"), 2 ),
method="circle",
type="upper",
tl.col="black")
diag(5)
knitr::opts_chunk$set(echo = TRUE)
decompose_A <- function(A){
# get the size of the matrix A
rows = dim(augmented)[1]
cols = dim(augmented)[2]
# initialize U to the
U <- diag(rows)
for(col in 1:cols){
for(row in (col + 1):rows){
coeff <- ( (-1*A[row,col])/A[row - 1,col] )
print( paste0( coeff, " * R" , row -1, " + R", row ) )
augmented[row,] <- ( coeff * augmented[row - 1,] ) + augmented[row,]
print(augmented)
print("---------------------------------")
}
}
return(A)
}
decompose_A <- function(A){
# get the size of the matrix A
rows = dim(A)[1]
cols = dim(A)[2]
# initialize U to the
U <- diag(rows)
for(col in 1:cols){
for(row in (col + 1):rows){
coeff <- ( (-1*A[row,col])/A[row - 1,col] )
print( paste0( coeff, " * R" , row -1, " + R", row ) )
A[row,] <- ( coeff * A[row - 1,] ) + A[row,]
print(A)
print("---------------------------------")
}
}
return(A)
}
matrix_A <- matrix(c( 1, 3, 2, 1, 1, 1, 3, 5, 6), ncol = 3, byrow = T)
LU <- decompose_A(matrix_A)
decompose_A <- function(A){
# get the size of the matrix A
rows = dim(A)[1]
cols = dim(A)[2]
# initialize U to the
U <- diag(rows)
for(col in 1:cols){
for(row in (col + 1):rows){
if((col+1) <= rows){break}
coeff <- ( (-1*A[row,col])/A[row - 1,col] )
print( paste0( coeff, " * R" , row -1, " + R", row ) )
A[row,] <- ( coeff * A[row - 1,] ) + A[row,]
print(A)
print("---------------------------------")
}
}
return(A)
}
matrix_A <- matrix(c( 1, 3, 2, 1, 1, 1, 3, 5, 6), ncol = 3, byrow = T)
LU <- decompose_A(matrix_A)
matrix_A <- matrix(c( 1, 3, 2, 1, 1, 1, 3, 5, 6), ncol = 3, byrow = T)
LU <- decompose_A(matrix_A)
decompose_A <- function(A){
# get the size of the matrix A
rows = dim(A)[1]
cols = dim(A)[2]
# initialize U to the
U <- diag(rows)
for(col in 1:cols){
for(row in (col + 1):rows){
if((col+1) > rows){break}
coeff <- ( (-1*A[row,col])/A[row - 1,col] )
print( paste0( coeff, " * R" , row -1, " + R", row ) )
A[row,] <- ( coeff * A[row - 1,] ) + A[row,]
print(A)
print("---------------------------------")
}
}
return(A)
}
matrix_A <- matrix(c( 1, 3, 2, 1, 1, 1, 3, 5, 6), ncol = 3, byrow = T)
LU <- decompose_A(matrix_A)
LU
install.packages("shiny")
library(shiny)
runExample(01_hello)
runExample("01_hello")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("cleaned-cdc-mortality-1999-2010-2.csv")
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
View(data)
?selectInput
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
distinct(data$Year)
library("dplyr")
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
distinct(data$Year)
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
distinct(data, data$Year)
setwd("C:/Users/agilharry/OneDrive - CUNY School of Professional Studies/module3_AGilharry")
runApp()
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
distinct(data, data$Year)$Year
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
distinct(data, data$Year)$Year
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
a <- distinct(data, data$Year)
a$Year
View(a)
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
a <- distinct(data, Year)
a$[year]
View(a)
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
a <- distinct(data, Year)
a$Year
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
distinct(data, Year)$Year
runApp()
install.packages(plotly)
install.packages("plotly")
runApp()
runApp()
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
# generate bins based on input$bins from ui.R
Q1MapData <- filter(data, Year == input$year, ICD.Chapter == cause)
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
# generate bins based on input$bins from ui.R
Q1MapData <- filter(data, Year == 2010, ICD.Chapter == 'Certain infectious and parasitic diseases')
Q1MapData$hover <- with(df, paste(State, "<br>",
"Year", Year, "<br>",
"Crude Mortality Rate", Crude.Rate, "<br>",
"Polulation", Population, "<br>",
"Deaths", Deaths))
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
# generate bins based on input$bins from ui.R
Q1MapData <- filter(data, Year == 2010, ICD.Chapter == 'Certain infectious and parasitic diseases')
Q1MapData$hover <- with(Q1MapData, paste(State, "<br>",
"Year", Year, "<br>",
"Crude Mortality Rate", Crude.Rate, "<br>",
"Polulation", Population, "<br>",
"Deaths", Deaths))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(Q1MapData, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
# generate bins based on input$bins from ui.R
Q1MapData <- filter(data, Year == 2010, ICD.Chapter == 'Certain infectious and parasitic diseases')
Q1MapData$hover <- with(Q1MapData, paste(State, "<br>",
"Year", Year, "<br>",
"Crude Mortality Rate", Crude.Rate, "<br>",
"Polulation", Population, "<br>",
"Deaths", Deaths))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(Q1MapData, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~Crude.Rate, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
# generate bins based on input$bins from ui.R
Q1MapData <- filter(data, Year == 2010, ICD.Chapter == 'Certain infectious and parasitic diseases')
Q1MapData$hover <- with(Q1MapData, paste(State, "<br>",
"Year", Year, "<br>",
"Crude Mortality Rate", Crude.Rate, "<br>",
"Polulation", Population, "<br>",
"Deaths", Deaths))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(Q1MapData, locationmode = 'USA-states') %>%
add_trace(
z = ~Crude.Rate, text = ~hover, locations = ~State,
color = ~Crude.Rate, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="choropleth-ag")
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
# generate bins based on input$bins from ui.R
Q1MapData <- filter(data, Year == 2010, ICD.Chapter == 'Certain infectious and parasitic diseases')
Q1MapData$hover <- with(Q1MapData, paste(State, "<br>",
"Year", Year, "<br>",
"Crude Mortality Rate", Crude.Rate, "<br>",
"Polulation", Population, "<br>",
"Deaths", Deaths))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(Q1MapData, locationmode = 'USA-states') %>%
add_trace(
z = ~Crude.Rate, text = ~hover, locations = ~State,
color = ~Crude.Rate, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="choropleth-agilharry",api_key='zuCRUxfK09iTCU1aIGDE')
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv")
Sys.setenv("plotly_username"="agilharrysr")
Sys.setenv("plotly_api_key"="zuCRUxfK09iTCU1aIGDE")
# generate bins based on input$bins from ui.R
Q1MapData <- filter(data, Year == 2010, ICD.Chapter == 'Certain infectious and parasitic diseases')
Q1MapData$hover <- with(Q1MapData, paste(State, "<br>",
"Year", Year, "<br>",
"Crude Mortality Rate", Crude.Rate, "<br>",
"Polulation", Population, "<br>",
"Deaths", Deaths))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(Q1MapData, locationmode = 'USA-states') %>%
add_trace(
z = ~Crude.Rate, text = ~hover, locations = ~State,
color = ~Crude.Rate, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="choropleth-agilharry")
chart_link
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Q1MapData)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/agilharry/OneDrive - CUNY School of Professional Studies/test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
Q1MapData <- filter(data, Year == 2010, ICD.Chapter == 'Certain infectious and parasitic diseases') %>%
arrange(Crude.Rate)
View(Q1MapData)
runApp()
runApp()
runApp()
runApp()
data <- read.csv("data/cleaned-cdc-mortality-1999-2010-2.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
Q1MapData <- filter(data, Year == 2010, ICD.Chapter == 'Certain infectious and parasitic diseases') %>%
arrange(Crude.Rate)
Q1MapData$State <- factor(Q1MapData$Sate, levels = unique(Q1MapData$State)[order(Q1MapData$Crude.Rate, decreasing = TRUE)])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?titlePanel
runApp()
runApp()
View(data)
data$Population.PCT <- data$Population/sum(data$Population)
data$Population.PCT <- data$Population/sum(as.numeric(data$Population))
View(data)
data$Population.PCT <- data$Population/sum(round(as.numeric(data$Population),3))
View(data)
data$Population.PCT <- round(data$Population/sum(as.numeric(data$Population)),3)
View(data)
data$Population.PCT <- round((data$Population/sum(as.numeric(data$Population))) * 100,3)
View(data)
weighted.mean(data$Crude.Rate, data$Population.PCT)
mean(data$Crude.Rate)
runApp()
runApp()
runApp()
QData$State[1]
data$State[1]
data$State[nrow(data)]
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
